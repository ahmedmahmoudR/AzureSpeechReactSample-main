[{"C:\\Users\\Dell\\Desktop\\AzureSpeechReactSample-main\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\AzureSpeechReactSample-main\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\AzureSpeechReactSample-main\\src\\token_util.js":"3"},{"size":239,"mtime":1629992985000,"results":"4","hashOfConfig":"5"},{"size":4585,"mtime":1652093886894,"results":"6","hashOfConfig":"5"},{"size":981,"mtime":1629992985000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"t4duw1",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\AzureSpeechReactSample-main\\src\\index.js",[],["16","17"],"C:\\Users\\Dell\\Desktop\\AzureSpeechReactSample-main\\src\\App.js",["18"],"import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { Container } from 'reactstrap';\nimport { getTokenOrRefresh } from './token_util';\nimport './custom.css'\nimport { ResultReason } from 'microsoft-cognitiveservices-speech-sdk';\n\nconst speechsdk = require('microsoft-cognitiveservices-speech-sdk')\n\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            displayText: 'INITIALIZED: ready to test speech...'\n        }\n    }\n     \n    \n    async componentDidMount() {\n        // check for valid speech key/region\n        const tokenRes = await getTokenOrRefresh();\n        if (tokenRes.authToken === null) {\n            this.setState({\n                displayText: 'FATAL_ERROR: ' + tokenRes.error\n            });\n        }\n    }\n\n    async sttFromMic() {\n        const tokenObj = await getTokenOrRefresh();\n        const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\n        speechConfig.speechRecognitionLanguage = 'ar-EG';\n        \n        const audioConfig = speechsdk.AudioConfig.fromDefaultMicrophoneInput();\n        const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\n\n        this.setState({\n            displayText: 'speak into your microphone...'\n        });\n\n        recognizer.recognizeOnceAsync(result => {\n            let displayText;\n            if (result.reason === ResultReason.RecognizedSpeech) {\n                displayText = `RECOGNIZED: Text=${result.text}`\n                console.log(displayText);\n                $(\"a#programatically\").click(function(){\n                    var now = displayText;\n                    this.href = \"data:text/plain;charset=UTF-8,\"  + encodeURIComponent(now);\n                });\n            } else {\n                displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\n            }\n\n            this.setState({\n                displayText: displayText\n            });\n        });\n    }\n\n    async fileChange(event) {\n        const audioFile = event.target.files[0];\n        console.log(audioFile);\n        const fileInfo = audioFile.name + ` size=${audioFile.size} bytes `;\n\n        this.setState({\n            displayText: fileInfo\n        });\n\n        const tokenObj = await getTokenOrRefresh();\n        const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\n        speechConfig.speechRecognitionLanguage = 'ar-EG';\n\n        const audioConfig = speechsdk.AudioConfig.fromWavFileInput(audioFile);\n        const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\n\n        recognizer.recognizeOnceAsync(result => {\n            let displayText;\n            if (result.reason === ResultReason.RecognizedSpeech) {\n                displayText = `RECOGNIZED: Text=${result.text}`\n            } else {\n                displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\n            }\n\n            this.setState({\n                displayText: fileInfo + displayText\n            });\n        });\n    }\n\n    render() {\n        \n        return (\n            \n            <Container className=\"app-container\">\n                <h1 className=\"display-4 mb-3\">Speech sample app</h1>\n              \n  \n\n                <div className=\"row main-container\">\n                    <div className=\"col-6\">\n                        <i className=\"fas fa-microphone fa-lg mr-2\" onClick={() => this.sttFromMic()}></i>\n                        Convert speech to text from your mic.\n\n                        <div className=\"mt-2\">\n                            <label htmlFor=\"audio-file\"><i className=\"fas fa-file-audio fa-lg mr-2\"></i></label>\n                            <input \n                                type=\"file\" \n                                id=\"audio-file\" \n                                onChange={(e) => this.fileChange(e)} \n                                style={{display: \"none\"}} \n                            />\n                            Convert speech to text from an audio file.\n                        </div>\n                        <a id=\"programatically\" href=\"\" download=\"date.txt\">Download speech result</a>\n                    </div>\n                    <div className=\"col-6 output-display rounded\">\n                        <code>{this.state.displayText}</code>\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}","C:\\Users\\Dell\\Desktop\\AzureSpeechReactSample-main\\src\\token_util.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":116,"column":25,"nodeType":"25","endLine":116,"endColumn":77},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]